<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20210330更新日志</title>
    <url>/2021/03/30/21-06-17/</url>
    <content><![CDATA[<p> 1.标签和分类页面可以进去了</p>
<p>2.添加<del>超级卡哇伊的</del>头像</p>
<p>3.删除掉无用的about（以后可能有用）</p>
<p>其他博文还在路上</p>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
  </entry>
  <entry>
    <title>20210331更新日志</title>
    <url>/2021/03/31/19-33-55/</url>
    <content><![CDATA[<p>1.添加搜索功能</p>
<p>2.在“关于”界面内增加了简介</p>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
  </entry>
  <entry>
    <title>20210403更新日志</title>
    <url>/2021/04/03/23-44-58/</url>
    <content><![CDATA[<p>1.增加底部字数统计</p>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
  </entry>
  <entry>
    <title>20210401更新日志</title>
    <url>/2021/04/01/21-08-26/</url>
    <content><![CDATA[<p>1.底部添加点击量（貌似有点小问题？）</p>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
  </entry>
  <entry>
    <title>colorful slimes(DP)</title>
    <url>/2021/04/04/22-56-07/</url>
    <content><![CDATA[<p>题目描述<br>Snuke lives in another world, where slimes are real creatures and kept by some people. Slimes come in N colors. Those colors are conveniently numbered 1 through N. Snuke currently has no slime. His objective is to have slimes of all the colors together.</p>
<p>Snuke can perform the following two actions:</p>
<p>Select a color i (1≤i≤N), such that he does not currently have a slime in color i, and catch a slime in color i. This action takes him ai seconds.</p>
<p>Cast a spell, which changes the color of all the slimes that he currently has. The color of a slime in color i (1≤i≤N−1) will become color i+1, and the color of a slime in color N will become color 1. This action takes him x seconds.</p>
<p>Find the minimum time that Snuke needs to have slimes in all N colors.</p>
<p>Constraints<br>2≤N≤2,000<br>ai are integers.<br>1≤ai≤109<br>x is an integer.<br>1≤x≤109<br>输入<br>The input is given from Standard Input in the following format:</p>
<p>N x<br>a1 a2 … aN<br>输出<br>Find the minimum time that Snuke needs to have slimes in all N colors.<br>样例输入 Copy<br>2 10<br>1 100<br>样例输出 Copy<br>12<br>提示<br>Snuke can act as follows:</p>
<p>Catch a slime in color 1. This takes 1 second.<br>Cast the spell. The color of the slime changes: 1 → 2. This takes 10 seconds.<br>Catch a slime in color 1. This takes 1 second.<br>本题大意是Snuke 想要获得N种颜色，他有两种操作，一是直接付出对应颜色的代价来获得，二是所有获得的颜色i变成颜色i + 1。<br>所以想要获得颜色i 有两种方法<br>1.直接付出相应代价。<br>2.进行操作二j次使 i-j（已经获得）变成 i 。<br>不妨设进行操作二的次数为j，显然想要以最小的代价获得全部的颜色，只需要最多n-1次操作二即可。<br>于是有 0 &lt;= j &lt;= n - 1 。<br>我们发现进行操作二的次数最终会在总代价上加上 j * x，<br>不妨设dp[ i ] [ j ]表示进行j次操作时获得第i个颜色的最小代价。<br>于是可以通过枚举j来获得操作次数为j时获得每种颜色付出的最小代价，最终加和即可。<br>状态转移方程 dp[ i ] [ j ] = min ( a[ i - j ] , dp [ i ] [ j - 1 ])<br>a[i - j ] 表示在获得第i个颜色时进行了第j次操作（已经做了j - 1 次）并以后移了j次的代价获得，<br>dp[ i ] [ j - 1 ] 表示在获得第i个颜色时（已经进行了j-1次操作），以当前代价直接获得。<br>下面贴代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span>`</span></span><br><span class="line">`<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span>`</span></span><br><span class="line">`<span class="keyword">using</span> <span class="keyword">namespace</span> std;`</span><br><span class="line">`<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll ;`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">int</span> dp[<span class="number">2020</span>][<span class="number">2020</span>];`</span><br><span class="line">`ll mi = <span class="number">0x3f3f3f3f3f3f3f3f</span> ;`</span><br><span class="line">`int main()`</span><br><span class="line">`&#123;`</span><br><span class="line">`ll n , x ,sum;`</span><br><span class="line">`<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;x) ;`</span><br><span class="line">`<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)`</span><br><span class="line">`<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;dp[i][<span class="number">0</span>]) ;<span class="comment">//这里进行了空间优化，直接用dp[i][0] 表示a[i]即可 。` </span></span><br><span class="line">`<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)`</span><br><span class="line">`<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n - <span class="number">1</span> ; j ++)&#123;`</span><br><span class="line">        `<span class="keyword">int</span> k = i - j ;`</span><br><span class="line">        `<span class="keyword">if</span>(k &lt;=<span class="number">0</span>) k += n  ;<span class="comment">//指向后移j次的代价可能会循环`</span></span><br><span class="line">        `dp[i][j] = <span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[k][<span class="number">0</span>]) ;`</span><br><span class="line">    `&#125;`</span><br><span class="line">`<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= n - <span class="number">1</span>; i ++)&#123;`</span><br><span class="line">        `sum = <span class="number">0</span> ;`</span><br><span class="line">        `<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++)`</span><br><span class="line">            `sum += dp[j][i] ;`</span><br><span class="line">            `sum += i * x ;<span class="comment">//最后求得各个状态付出代价总和`</span></span><br><span class="line">            `mi = <span class="built_in">min</span>(mi,sum) ;<span class="comment">//取得其中的最小值`</span></span><br><span class="line">    `&#125;`</span><br><span class="line">`<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,mi) ;`</span><br><span class="line">`<span class="keyword">return</span> <span class="number">0</span> ；` </span><br><span class="line">`&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>刷题总结</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/29/20-24-16/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>大数乘积取模详解</title>
    <url>/2021/03/31/20-06-38/</url>
    <content><![CDATA[<p>对于给定三个数 a ，b  ,  mod .</p>
<p>求a * b模mod，</p>
<p>一般情况的最优策略是</p>
<p> ((a % mod) * (b %mod)) % mod </p>
<p><u>当a ， b ，mod 都很大的时候</u></p>
<p><u>还是会爆long long int(主要是mod太大)</u></p>
<p>这个时候正确的思路将a或者b拆解成不同部分乘积求和</p>
<p>类比快速幂的原理。</p>
<p>举个实例：求 3 * 15 对mod取模</p>
<p>将15 转化为二进制数1111</p>
<p>那么问题就转化为 3 * (1111)(2) %mod</p>
<p>分解1111得到</p>
<p>3 * (1 * 2^3 + 1* 2^2 + 1* 2^1 + 1*2^0)%mod </p>
<p>那么事实上我们只需将其各部分乘积分别取模，最后求和再取模即可。</p>
<p>下面贴代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_mult</span><span class="params">(ll a, ll b, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a %= mod;<span class="comment">//先降低a，b的规模</span></span><br><span class="line">    b %= mod;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)<span class="comment">//判断b的最后一位是否为1,是1就加是0就不加嘛</span></span><br><span class="line">         &#123;</span><br><span class="line">            ans += a;<span class="comment">//我们让ans加上a，其实实现了括号内的加法操作</span></span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a &lt;&lt;= <span class="number">1</span>;<span class="comment">//将a乘以2，这就是括号外面的a与括号内2的倍数的乘积</span></span><br><span class="line">        a%=mod;<span class="comment">//并且将a不断取模</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;<span class="comment">//让b的二进制数向右移动一位，即b/2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ll  a,b,mod;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;mod) ; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">mod_mult</span>(a,b,mod)) ;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>我自认为已经讲得非常详细啦，为了优化运行速度使用了位运算，不熟悉位运算的小伙伴可以去了解一下哦。</p>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>取模</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果旅游（DP）</title>
    <url>/2021/04/02/21-16-33/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>xiaoT发现山谷相当的大，准确地说应该是相当的长，xiaoT想到山谷的那头去看看，但是靠xiaoT走路的速度，到那边要n年。还好xiaoT可以买一些苹果，它把这些苹果当成动力，根据火箭发射的原理，如果xiaoT把苹果向后扔，xiaoT就会向前进。</p>
<p>苹果有两种，一种青苹果，一种红苹果。<br>已知到山谷的长度为k，用一些（同一种类）苹果可以通过的路程为1。<br>苹果的价格是不一样的，红苹果的价格是红苹果个数的四次方。<br>青苹果的价格就是青苹果个数。</p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行有一个正整数n表示xiaoT走路到那边需要的时间。<br>第二行有一个正整数k表示山谷的长度。<br>接下来k行，每行两个正整数，分别表示通过该段：<br>如果使用红苹果，则需要的数量为a<br>如果使用青苹果，则需要的数量为b</p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出只有一个数，买苹果的最少的花费。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2296</span><br><span class="line">3</span><br><span class="line">3 1000</span><br><span class="line">2 5000</span><br><span class="line">4 8000</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2296</span><br></pre></td></tr></table></figure>

<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>样例解释<br>第1段用青苹果，第2、3段用红苹果，花费是1000+(2+4)4</p>
<p>对于30%的数据，k≤10<br>对于50%的数据，k≤25<br>对于100%的数据，k≤50<br>对于100%的数据，每段路消耗的红苹果的数量≤10<br>对于100%的数据，每段路消耗的青苹果的数量≤107</p>
<p>题目大意是给定有k段路，每段路可以选择使用对应量的青苹果或者红苹果通过，使用青苹果付出的代价就是青苹果的数量，使用红苹果的代价是最终红苹果数量的4次方。</p>
<p><u>通过读题不难知道正整数n对本题结果完全没有影响，属于没有用的变量。</u></p>
<p>由给定的k范围可知若枚举每一段路，时间复杂度能够达到2^50，这个显然不合适</p>
<p>通过经验判断，这是一道dp题。</p>
<p>最终红苹果需要付出的代价取决于其最终的数量。也就是说我们不能在递推的过程中直接得出当时付出的代价，但是青苹果的数量即为付出的代价，换言之我们可以<u>通过枚举红苹果的数量，最终得到最少的青苹果数量来获得红苹果数量一定时的最小总代价。</u></p>
<p>不妨设dp[i] [j] 表示<u><strong>当红苹果数量为   j   时，前   i   段路中使用青苹果的最小数量。</strong></u></p>
<p>不妨用a[i]  , b[i]分别表示第i段路所需要的红苹果和青苹果的数量 。 </p>
<p>当 j  &lt;  a[i] 时，此时红苹果数量为  j ，可知经过第 i 段路一定没有选择红苹果 ，即：</p>
<p>dp[i] [j] = dp[i-1] [j] + b[i] ; </p>
<p>当j  &gt;= a[i] 时，那就有两种情况，一种是红苹果数量为j时没有选择 a[i] ,而是选择了青苹果即：</p>
<p>dp[i] [j] = dp[i- 1] [j] + b[i] ; </p>
<p>若此时选择了a[i] ,则dp[i] [j] = dp[i-1] [j-a[i]] ; </p>
<p>可知状态转移方程 dp[i] [j] = min (dp[i-1] [j] + b[i] , dp[i-1] [j-a[i]]) </p>
<p>最终枚举红苹果的数量，加上递推终点的青苹果数量即可。</p>
<p>那么下面贴AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> t ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll ;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x  ,<span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int</span> y )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y ;</span><br><span class="line">&#125;</span><br><span class="line">ll dp[<span class="number">55</span>][<span class="number">505</span>] ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t) ;</span><br><span class="line">    <span class="keyword">int</span> k ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k) ;</span><br><span class="line">    ll a[k+<span class="number">5</span>],b[k+<span class="number">5</span>] ;</span><br><span class="line">    ll sum = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ; i &lt;= k ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,a+i,b+i) ;</span><br><span class="line">        sum += a[i] ;<span class="comment">//记录红苹果最大的数量用以枚举</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span> ; i &lt;= k ; i ++ )</span><br><span class="line">    <span class="keyword">for</span>(ll j = sum ; j &gt;= <span class="number">0</span> ; j --)</span><br><span class="line">    &#123;   <span class="keyword">if</span>(j  &lt; a[i])</span><br><span class="line">          dp[i][j] = dp[i<span class="number">-1</span>][j] + b[i] ;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(j &gt;= a[i])</span><br><span class="line">          dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j] + b[i],dp[i<span class="number">-1</span>][j-a[i]]) ;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   ll mi = <span class="number">0x3f3f3f3f</span> ;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">0</span> ;  i&lt;= sum ; i ++ )</span><br><span class="line">    mi = <span class="built_in">min</span>(mi,dp[k][i] + i * i * i * i ) ;<span class="comment">//找到最小可能值即可</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,mi) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题总结</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>求1到n内所有数因子的和</title>
    <url>/2021/04/05/20-35-53/</url>
    <content><![CDATA[<p>求 1 ~ n范围内 各个数因子的和，数论中给出了如下结论 ：</p>
<p>n * ( 1 / 1 + 1/2 + 1/3 + …… + 1/ n) ; </p>
<p>原来在1到n中，1可以作为 n/ 1个数的因子 ； </p>
<p>2 可以作为 n / 2 个数的因子 ； </p>
<p>3可以作为 n / 3 个数的因子；</p>
<p>由此得出上面式子</p>
<p>将每个部分视为n / x</p>
<p>可知可以降低范围到√n</p>
<p>下面贴代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(l=<span class="number">1</span>; l&lt;=t; l++)</span><br><span class="line">            ans += n/l;</span><br><span class="line">    ans = ans*<span class="number">2</span>-t*t;<span class="comment">//其中t * t &lt;= n</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>

<p>这里贴出另一种代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LL l, r;</span><br><span class="line">   LL ans = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>( l = <span class="number">1</span>; l &lt;= n; l = r+<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       r = n/(n/l);</span><br><span class="line">       ans += n/l *(r - l + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
</search>
