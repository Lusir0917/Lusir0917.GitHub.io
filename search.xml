<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20210330更新日志</title>
    <url>/2021/03/30/21-06-17/</url>
    <content><![CDATA[<p> 1.标签和分类页面可以进去了</p>
<p>2.添加<del>超级卡哇伊的</del>头像</p>
<p>3.删除掉无用的about（以后可能有用）</p>
<p>其他博文还在路上</p>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
  </entry>
  <entry>
    <title>20210331更新日志</title>
    <url>/2021/03/31/19-33-55/</url>
    <content><![CDATA[<p>1.添加搜索功能</p>
<p>2.在“关于”界面内增加了简介</p>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/29/20-24-16/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>大数乘积取模详解</title>
    <url>/2021/03/31/20-06-38/</url>
    <content><![CDATA[<p>对于给定三个数 a ，b  ,  mod .</p>
<p>求a * b模mod，</p>
<p>一般情况的最优策略是</p>
<p> ((a % mod) * (b %mod)) % mod </p>
<p><u>当a ， b ，mod 都很大的时候</u></p>
<p><u>还是会爆long long int(主要是mod太大)</u></p>
<p>这个时候正确的思路将a或者b拆解成不同部分乘积求和</p>
<p>类比快速幂的原理。</p>
<p>举个实例：求 3 * 15 对mod取模</p>
<p>将15 转化为二进制数1111</p>
<p>那么问题就转化为 3 * (1111)(2) %mod</p>
<p>分解1111得到</p>
<p>3 * (1 * 2^3 + 1* 2^2 + 1* 2^1 + 1*2^0)%mod </p>
<p>那么事实上我们只需将其各部分乘积分别取模，最后求和再取模即可。</p>
<p>下面贴代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_mult</span><span class="params">(ll a, ll b, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a %= mod;<span class="comment">//先降低a，b的规模</span></span><br><span class="line">    b %= mod;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)<span class="comment">//判断b的最后一位是否为1,是1就加是0就不加嘛</span></span><br><span class="line">         &#123;</span><br><span class="line">            ans += a;<span class="comment">//我们让ans加上a，其实实现了括号内的加法操作</span></span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a &lt;&lt;= <span class="number">1</span>;<span class="comment">//将a乘以2，这就是括号外面的a与括号内2的倍数的乘积</span></span><br><span class="line">        a%=mod;<span class="comment">//并且将a不断取模</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;<span class="comment">//让b的二进制数向右移动一位，即b/2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ll  a,b,mod;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;mod) ; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">mod_mult</span>(a,b,mod)) ;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>我自认为已经讲得非常详细啦，为了优化运行速度使用了位运算，不熟悉位运算的小伙伴可以去了解一下哦。</p>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>取模</tag>
      </tags>
  </entry>
</search>
